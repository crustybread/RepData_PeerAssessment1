summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", break=100)
hist(ppm, col="green", breaks =100)
rug(ppm)
hist(ppm, col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
table(region)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region=="east")
head(east)
hist(pollution$pm25, col="green")
hist(east$pm25, col="green")
hist(subset(pollution,region="west")$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution, plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution$region=="west")
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(swirl)
swirl()
select(time(-5:20))
select(time=c(-5:20))
select(date=time, c(-5:20))
select(time, c(-5:20))
-5:20
-(5:20)
select(-(X:size))
select(-(5:20))
select(time, -(5:20))
library(dplyr)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- arrange(size:ip_id)
cran2 <- arrange(c(size:ip_id))
cran2 <- arrange(cran, (size:ip_id)
)
?arrange
cran2 <- subset(cran, (size:ip_id))
cran2 <- subset(cran, c(size:ip_id))
cran2 <- subset(cran, size:ip_id
)
?subset
cran2 <- subset(cran, select=size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2 ^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
clear
library(knitr)
library(markdown)
<<my-label, eval=TRUE, dev='png'>>=
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
plot(x, type = 'l')  # Brownian motion
@
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
## [1] -1.939758
plot(x, type = 'l')  # Brownian motion
<<my-label, eval=TRUE, dev='png'>>=
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
plot(x, type = 'l')  # Brownian motion
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
## [1] -1.939758
plot(x, type = 'l')  # Brownian motion
getwd()
<<my-label, eval=TRUE, dev='png'>>=
set.seed(1213)  # for reproducibility
x = cumsum(rnorm(100))
mean(x)  # mean of x
plot(x, type = 'l')  # Brownian motion
?knitr
source('~/.active-rstudio-document')
library(plyr)
library(dplyr)
library(data.table)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, fig.width = 7, fig.height = 5, fig.path = "fig-")
setwd('~/documents/reproducible_research/week2')
data <- unzip("repdata_data_activity.zip")
data <- read.csv(data, header=T, sep=",", na.strings = "NA", stringsAsFactors = F)
data <- as.data.frame(data)
names(data) <- c("steps","date","interval")
data <- data[ ,c(2,1,3)]
data1 <- as.data.frame(data)
head(data)
tail(data)
12 * 24
288 * 60
24 * 60
1440 / 5
835 / 5
167 / 24
head(data,2500)
0/5
2355/5
5 * 472
int <- c(1:288) #total number of 5 minute intervals in a 24-hour period
int
library(plyr)
library(dplyr)
library(data.table)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, fig.width = 7, fig.height = 5, fig.path = "fig-")
setwd('~/documents/reproducible_research/week2')
data <- unzip("repdata_data_activity.zip")
data <- read.csv(data, header=T, sep=",", na.strings = "NA", stringsAsFactors = F)
data <- as.data.frame(data)
names(data) <- c("steps","date","interval")
data <- data[ ,c(2,1,3)]
#convert 'timeclock' to unit interval
for (v in 1:288)  { #288 is the total number of 5 minute intervals in a 24-hour period
data$interval[v] <- v
}
data1 <- as.data.frame(data)
head(data)
tail(data)
tail(data,500)
head(data,300)
data_gp <- group_by(data, date)
head(data_gp)
data <- unzip("repdata_data_activity.zip")
data <- read.csv(data, header=T, sep=",", na.strings = "NA", stringsAsFactors = F)
data <- as.data.frame(data)
names(data) <- c("steps","date","interval")
data <- data[ ,c(2,1,3)]
#convert 'timeclock' to unit interval
data_gp <- group_by(data, date)
head(data_gp)
for (v in 1:288)  { #288 is the total number of 5 minute intervals in a 24-hour period
date[v]$data$interval[v] <- v
}
data_gp$date[1]
data_gp$date[v]$data$interval[v] < v
data_gp$date[v]
head(data_gp)
str(data_gp)
seq_len(4)
seq_len(288)
data_gp <- group_by(data, date)
for {i in 1:288)
if (data_gp$data[i])
data_gp$interval[int_id] <- int_id
}
for {i in 1:288)
if(exists(data_gp$date[i]))
data_gp$interval[int_id] <- int_id
}
for (i in 1:288)
if(exists(data_gp$date[i]))
data_gp$interval[int_id] <- int_id
}
for (i in 1:288)
if(exists(data_gp$date[i])) {
data_gp$interval[int_id] <- int_id
}
head(data,400)
for (i in 1:288)
if(data_gp$date[i]) {
data_gp$interval[int_id] <- int_id
}
for (i in 1:288)
do while (data_gp$date[i]) {
data_gp$interval[int_id] <- int_id
}
?while
()
?while
()
for (i in 1:288)
while data_gp$date[i] {
data_gp$interval[int_id] <- int_id
}
for (i in 1:288)
print(data_gp$date[i])
for (i in 1:289)
print(data_gp$date[i])
for (i in 1:len(data_gp))
print(data_gp$date[i])
for (i in 1:nrow(data_gp))
print(data_gp$date[i])
for (i in 1:nrow(data_gp))
for (p in 1:288)
print(data_gp$date[p])
data_gp$data[1]
data_gp$date[1]
data_gp$date[2]
data_gp$date[3]
data_gp$date[4]
data_gp$date[5]
data_gp$date[288]
data_gp$date[289]
data_gp$interval[0]
data_gp$interval[1]
data_gp$interval[2]
data_gp[1]
data_gp[2]
data_gp[3]
data_gp[4]
data_gp[,4]
data_gp[3,]
data_gp[1,]
data_gp[1,]$interval[1]
data_gp[1,]$interval[2]
data_gp[2,]$interval[2]
data_gp[1,]$interval[1]
data_gp[1,]
data_gp[2,]
data_gp[3,]
for (i in 1:nrow(data))
for (p in 1:288)
data_gp[i,]$interval[p] <- p
data_gp[i,]
data_gp[2,]
data_gp[3,]
data_gp[4,]
data_gp[15320,]
data_gp[15320,]$interval[1]
data_gp[15320,]$interval[2]
data_gp[15320,]$interval[1]
for (i in 1:nrow(data))
for (p in 1:288)
data_gp[i,]$interval[1] <- p
data_gp
tail(data)
data_gp[1,]$interval[1] <- 1
head(data)
head(data_gp)
data_gp[2,]$interval[1] <- 2
head(data_gp)
data_gp[3,]$interval[1] <- 3
p <- 1
for (i in 1:nrow(data)) {
for (p in 1:288) {
data_gp[i,]$interval[1] <- p
}
}
head(data_gp)
p <- 1
for (i in 1:nrow(data)) {
while(p < 289) {
data_gp[i,]$interval[1] <- p
p <- p + 1
}
p <- 1
}
tail(data_gp)
head(data_gp)
nrow(data)
nrow(data)/288
l <- c(1:nrow(data))
m <- rep(1:288, times = 61)
l
m
l <- c(1:nrow(data))
m <- rep(1:288, times = 61)
for i in 1:l {
data_gp[i,]$interval[1] <- m
}
m <- c(1:nrow(data))
n <- rep(1:288, times = 61)
for (i in 1:m) {
data_gp[i,]$interval[1] <- n
}
288 * 61
m
nrow(m)
length(m)
m <- list(1:nrow(data))
str(m)
m <- nrow(data)
n <- rep(1:288, times = 61)
m
n
for (i in 1:m)
data_gp[i,]$interval[1] <- n
warning()
warnings()
head(data_gp)
head(n)
nrow(n)
length(n)
m
m <- nrow(data)
n <- rep(1:288, times = 61)
for (o in 1:m)
data_gp[o,]$interval[1] <- n[o]
head(data_gp)
head(data_gp,600)
data <- as.data.frame(data_gp)
data1 <- data
head(data_gp, 600)
print(data_gp)
data_gp[288]
data_gp[288,]
data_gp[289,]
data_gp[566,]
data_gp[567"567",]
data_gp[567,]
data_gp[568,]
data_gp[569,]
288 * 2
data_gp[576,]
data_gp[577,]
288 * 3
data_gp[864,]
data_gp[865,]
#convert 'timeclock' to unit interval
for (v in 1:288)  { #288 is the total number of 5 minute intervals in a 24-hour period
data$interval[v] <- v
}
data1 <- as.data.frame(data)
summary(data)
summary(data1)
stp
print(stp)
library(plyr)
library(dplyr)
library(data.table)
library(knitr)
knitr::opts_chunk$set(cache = TRUE, fig.width = 7, fig.height = 5, fig.path = "fig-")
setwd('~/documents/reproducible_research/week2')
data <- unzip("repdata_data_activity.zip")
data <- read.csv(data, header=T, sep=",", na.strings = "NA", stringsAsFactors = F)
data <- as.data.frame(data)
names(data) <- c("steps","date","interval")
data <- data[ ,c(2,1,3)]
#convert 'interval' to an index from 1 to 288 (288 is the total number of 5-minute intervals in a 24-hour period)
data1 <- as.data.frame(data)
data_gp <- group_by(data, date)
m <- nrow(data)
n <- rep(1:288, times = 61)
for (o in 1:m)
data_gp[o,]$interval[1] <- n[o]
data <- as.data.frame(unlist(data_gp)) #baseline dataset where NAs will not be imputed
data1 <- data #baseline dataset where NAs will be imputed
stp <- data$steps
stpn <- length(stp) #total number of records in dataset including NAs
stp1 <- na.omit(stp) #omit NAs from data
stpn1 <- length(stp1) #number of records after omitting NAs
stp
data <- as.data.frame(data_gp) #baseline dataset where NAs will not be imputed
data1 <- data #baseline dataset where NAs will be imputed
data$steps
stpn
stpn <- length(stp) #total number of records in dataset including NAs
stp1 <- na.omit(stp) #omit NAs from data
stpn1 <- length(stp1) #number of records after omitting NAs
stp
stp <- data$steps
stpn <- length(stp) #total number of records in dataset including NAs
stp1 <- na.omit(stp) #omit NAs from data
stpn1 <- length(stp1) #number of records after omitting NAs
stp
stpn
stp1
stpn
stpn1
ms <- mean(stp1) #mean value of steps in dataset after omitting NAs
data <- na.omit(data) #strip all NAs from data
data <- arrange(data, date, steps)
data_gp_sum  <- summarise(data_gp, sum(steps))
print(as.data.frame(data_gp_sum))
data_gp <- group_by(data, date)
data_gp_sum  <- summarise(data_gp, sum(steps))
print(as.data.frame(data_gp_sum))
names(data_gp_sum) <- c("date","sum_steps")
data_sum <- data_gp_sum$sum_steps
hist(data_sum, xlab = "Total number of steps each day (NAs are not imputed)")
data_gp_mean <- summarise(data_gp, mean(steps))
data_gp_median <- summarise(data_gp, median(steps))
print(as.data.frame(data_gp_mean))
print(as.data.frame(data_gp_median))
data$interval
data_gp1 <- group_by(data, interval)
data_gp1_mean <- summarise(data_gp1, mean(steps))
cols <- c("interval", "mean_steps")
names(data_gp1_mean) <- cols
dt_gp1_int <- data_gp1_mean$interval
dt_gp1_steps <- data_gp1_mean$mean_steps
plot.ts(dt_gp1_int, dt_gp1_steps, type = "l", xlab = "Interval", ylab = "Mean number of steps")
names(data_gp1_mean) <- c("interval", "mean_steps")
q <- which.max(data_gp1_mean$mean_steps)
print(data_gp1_mean[q,])
104 * 5
520 / 24
520 / 60
ttlna <- stpn - stpn1 #total NAs in dataset
print(ttlna) # total NAs in the dataset
print(ttlna/stpn) # percentage of dataset that is NA
data1_gp <- group_by(data1, date)
data1_gp_mean <- summarise(data1_gp, mean(steps, na.rm = TRUE))
names(data1_gp_mean) <- c("date","mean_steps")
l <- nrow(data1_gp_mean)
for(i in 1:l)
if(is.na(data1_gp_mean$mean_steps[i])) {
data1_gp_mean$mean_steps[i] <- ms
}
dt1 <- as.data.frame(merge(data1, data1_gp_mean))
m <- nrow(data1)
for(i in 1:m)
if (is.na(dt1$steps[i])) {
dt1$steps[i] <- dt1$mean_steps[i]
ran <- round(runif(1, min = 1, max = 2))
if (ran == 1) {
dt1$steps[i] <- floor(dt1$steps[i])
} else {
dt1$steps[i] <- ceiling(dt1$steps[i])
}
}
data1 <- dt1[c(1,2,3)]
summary(data1)
data1_gp <- group_by(data1, date)
data1_gp_sum  <- summarise(data1_gp, sum(steps))
names(data1_gp_sum) <- c("date","sum_steps")
ysum <- data1_gp_sum$sum_steps
hist(ysum, xlab = "Total number of steps each day (NAs are imputed)")
data1_gp_mean <- summarise(data1_gp, mean(steps))
data1_gp_median <- summarise(data1_gp, median(steps))
print(as.data.frame(data1_gp_mean)) #mean imputed
print(as.data.frame(data1_gp_median)) #median imputed
summary(data) #NAs not imputed
summary(data1) #NAs imputed
data1$day_type <- weekdays(as.Date(data1$date))
weekend <- c("Saturday","Sunday")
for(j in 1:m) {
if (data1$day_type[j] %in% weekend[1:2]) {
data1$day_type[j] <- "Weekend"  }
else {
data1$day_type[j] <- "Weekday"  }
}
dt_we <- subset(data1, data1$day_type == "Weekend")
dt_wd <- subset(data1, data1$day_type == "Weekday")
dt_gp_we <- group_by(dt_we, interval)
dt_gp_wd <- group_by(dt_wd, interval)
dt_gp_we_mean <- summarise(dt_gp_we, mean(steps))
dt_gp_wd_mean <- summarise(dt_gp_wd, mean(steps))
cols <- c("interval", "mean_steps")
names(dt_gp_we_mean) <-cols
names(dt_gp_wd_mean) <- cols
dt_we_int <- dt_gp_we_mean$interval
dt_we_steps <- dt_gp_we_mean$mean_steps
dt_wd_int <- dt_gp_wd_mean$interval
dt_wd_steps <- dt_gp_wd_mean$mean_steps
par(mfrow=c(2,1))
plot.ts(dt_we_int, dt_we_steps, plot.type = "single", type = "l", main = "Weekend", xlab = "interval", ylab = "number of steps")
plot.ts(dt_wd_int, dt_wd_steps, plot.type = "single", type = "l", main = "Weekday", xlab = "Interval", ylab = "number of steps")
dt_we <- subset(data1, data1$day_type == "Weekend")
dt_wd <- subset(data1, data1$day_type == "Weekday")
dt_gp_we <- group_by(dt_we, interval)
dt_gp_wd <- group_by(dt_wd, interval)
dt_gp_we_mean <- summarise(dt_gp_we, mean(steps))
dt_gp_wd_mean <- summarise(dt_gp_wd, mean(steps))
cols <- c("interval", "mean_steps")
names(dt_gp_we_mean) <-cols
names(dt_gp_wd_mean) <- cols
dt_we_int <- dt_gp_we_mean$interval
dt_we_steps <- dt_gp_we_mean$mean_steps
dt_wd_int <- dt_gp_wd_mean$interval
dt_wd_steps <- dt_gp_wd_mean$mean_steps
par(mfrow=c(2,1))
plot.ts(dt_we_int, dt_we_steps, plot.type = "single", type = "l", main = "Weekend", xlab = "Index of 5-Minute Intervals", ylab = "Mean No. of Steps")
plot.ts(dt_wd_int, dt_wd_steps, plot.type = "single", type = "l", main = "Weekday", xlab = "Index of 5-Mintue Intervals", ylab = "Mean No. of Steps")
